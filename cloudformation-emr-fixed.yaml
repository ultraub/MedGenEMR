AWSTemplateFormatVersion: '2010-09-09'
Description: 'EMR Training System - Single EC2 Instance Deployment (Fixed)'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  KeyPairName:
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  AllowedIPRange:
    Description: IP address range that can access the EMR system
    Type: String
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range

  PatientCount:
    Description: Number of synthetic patients to generate
    Type: Number
    Default: 50
    MinValue: 10
    MaxValue: 500

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2
    us-west-2:
      AMI: ami-0f1a5f5ada0e0c6e7
    eu-west-1:
      AMI: ami-0d1bf5b68307103c2
    eu-central-1:
      AMI: ami-0a261c0e0317b44e8

Resources:
  # Security Group
  EMRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EMR Training System
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIPRange
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIPRange
          Description: SSH access
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SecurityGroup

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  EMRInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !Ref EMRSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Log output to CloudWatch
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          echo "Starting EMR Training System deployment..."
          
          # Update system
          yum update -y
          
          # Install Docker
          amazon-linux-extras install docker -y
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Install git
          yum install -y git
          
          # Create application directory
          mkdir -p /opt/emr-system
          cd /opt
          
          # Clone repository
          git clone https://github.com/ultraub/MedGenEMR.git emr-system
          cd emr-system
          
          # Create deployment script
          cat > deploy.sh << 'DEPLOY'
          #!/bin/bash
          set -e
          
          echo "Deploying EMR System..."
          
          # Check if we're already in the correct directory structure
          if [ -d "EMR" ]; then
              # We're in the parent directory
              cd EMR
          fi
          
          # Create a build directory with proper structure
          cd /opt
          rm -rf emr-build
          mkdir -p emr-build/EMR
          
          # Copy all files to the build directory
          cp -r emr-system/* emr-build/EMR/ 2>/dev/null || true
          
          # If Dockerfile.standalone exists in root, copy it
          if [ -f "emr-system/Dockerfile.standalone" ]; then
              cp emr-system/Dockerfile.standalone emr-build/
          elif [ -f "emr-system/EMR/Dockerfile.standalone" ]; then
              cp emr-system/EMR/Dockerfile.standalone emr-build/
          fi
          
          # Copy docker-compose file
          if [ -f "emr-system/docker-compose.standalone.yml" ]; then
              cp emr-system/docker-compose.standalone.yml emr-build/
          elif [ -f "emr-system/EMR/docker-compose.standalone.yml" ]; then
              cp emr-system/EMR/docker-compose.standalone.yml emr-build/
          fi
          
          # Copy other necessary files
          for file in nginx.conf supervisord.conf startup.sh; do
              if [ -f "emr-system/$file" ]; then
                  cp "emr-system/$file" emr-build/
              elif [ -f "emr-system/EMR/$file" ]; then
                  cp "emr-system/EMR/$file" emr-build/
              fi
          done
          
          cd emr-build
          
          # Fix npm install issue in Dockerfile
          if [ -f "Dockerfile.standalone" ]; then
              sed -i 's/npm ci/npm install/' Dockerfile.standalone
          fi
          
          # Set environment variables
          export PATIENT_COUNT=${PatientCount}
          
          # Build and start the application
          /usr/local/bin/docker-compose -f docker-compose.standalone.yml up -d --build
          
          echo "Deployment initiated. Container build may take 10-15 minutes."
          DEPLOY
          
          chmod +x deploy.sh
          
          # Run deployment
          ./deploy.sh
          
          # Create simple health check script
          cat > /usr/local/bin/check-emr-health.sh << 'HEALTH'
          #!/bin/bash
          if curl -f http://localhost/api/health >/dev/null 2>&1; then
              echo "EMR System is healthy"
              exit 0
          else
              echo "EMR System is not responding"
              exit 1
          fi
          HEALTH
          
          chmod +x /usr/local/bin/check-emr-health.sh
          
          # Setup CloudWatch Logs
          yum install -y awslogs
          
          cat > /etc/awslogs/awslogs.conf << CWLOGS
          [general]
          state_file = /var/lib/awslogs/agent-state
          
          [/var/log/user-data.log]
          file = /var/log/user-data.log
          log_group_name = /aws/ec2/emr-training-system
          log_stream_name = {instance_id}/user-data.log
          datetime_format = %Y-%m-%d %H:%M:%S
          
          [/var/lib/docker/containers/*/*-json.log]
          file = /var/lib/docker/containers/*/*-json.log
          log_group_name = /aws/ec2/emr-training-system
          log_stream_name = {instance_id}/docker.log
          datetime_format = %Y-%m-%dT%H:%M:%S
          CWLOGS
          
          systemctl start awslogsd
          systemctl enable awslogsd
          
          echo "EMR Training System deployment complete!"
          echo "Note: The system will be available in 10-15 minutes at http://$(curl -s ifconfig.me)"

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EMR-Instance
        - Key: Application
          Value: EMR-Training-System

  # Elastic IP
  EMRElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EMRInstance
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EIP

Outputs:
  PublicURL:
    Description: URL to access the EMR Training System
    Value: !Sub 'http://${EMRElasticIP}'
  
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${EMRElasticIP}'
  
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EMRInstance
  
  TroubleshootingCommands:
    Description: Commands to troubleshoot deployment
    Value: |
      # Check container status:
      sudo docker ps
      
      # View container logs:
      sudo docker logs $(sudo docker ps -q)
      
      # Check build progress:
      sudo tail -f /var/log/user-data.log
      
      # Restart deployment:
      cd /opt/emr-system && sudo ./deploy.sh