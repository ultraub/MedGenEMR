AWSTemplateFormatVersion: '2010-09-09'
Description: 'EMR Training System - Single EC2 Instance Deployment'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  KeyPairName:
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  AllowedIPRange:
    Description: IP address range that can access the EMR system
    Type: String
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range

  PatientCount:
    Description: Number of synthetic patients to generate
    Type: Number
    Default: 50
    MinValue: 10
    MaxValue: 500

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2
    us-west-2:
      AMI: ami-0f1a5f5ada0e0c6e7
    eu-west-1:
      AMI: ami-0d1bf5b68307103c2
    eu-central-1:
      AMI: ami-0a261c0e0317b44e8

Resources:
  # Security Group
  EMRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EMR Training System
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIPRange
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIPRange
          Description: SSH access
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SecurityGroup

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  EMRInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !Ref EMRSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Log output to CloudWatch
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          echo "Starting EMR Training System deployment..."
          
          # Update system
          yum update -y
          
          # Install Docker
          amazon-linux-extras install docker -y
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Install git
          yum install -y git
          
          # Create application directory
          mkdir -p /opt/emr-system
          cd /opt/emr-system
          
          # Clone repository (replace with your repo URL)
          # git clone https://github.com/yourusername/emr-training-system.git .
          
          # For now, create the necessary files inline
          cat > Dockerfile << 'DOCKERFILE'
          FROM python:3.9-slim
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              nginx supervisor curl default-jre-headless \
              gcc g++ git \
              && rm -rf /var/lib/apt/lists/*
          
          # Install Node.js
          RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
              apt-get install -y nodejs
          
          WORKDIR /app
          
          # Create a simple EMR system inline (simplified for demo)
          RUN mkdir -p backend frontend/build
          
          # Backend setup
          COPY <<'EOF' /app/backend/requirements.txt
          fastapi==0.104.1
          uvicorn[standard]==0.24.0
          sqlalchemy==2.0.23
          pydantic==2.5.0
          EOF
          
          RUN pip install -r /app/backend/requirements.txt
          
          # Simple backend app
          COPY <<'EOF' /app/backend/main.py
          from fastapi import FastAPI
          from fastapi.middleware.cors import CORSMiddleware
          import uvicorn
          
          app = FastAPI(title="EMR Training System")
          
          app.add_middleware(
              CORSMiddleware,
              allow_origins=["*"],
              allow_methods=["*"],
              allow_headers=["*"],
          )
          
          @app.get("/api/health")
          async def health_check():
              return {"status": "healthy", "service": "EMR Training System"}
          
          @app.get("/api/patients")
          async def get_patients():
              return []
          
          if __name__ == "__main__":
              uvicorn.run(app, host="0.0.0.0", port=8000)
          EOF
          
          # Frontend placeholder
          RUN echo '<html><body><h1>EMR Training System</h1><p>Backend API: <a href="/api/health">/api/health</a></p></body></html>' > /app/frontend/build/index.html
          
          # Nginx config
          COPY <<'EOF' /etc/nginx/sites-enabled/default
          server {
              listen 80;
              location / {
                  root /app/frontend/build;
                  try_files \$uri \$uri/ /index.html;
              }
              location /api {
                  proxy_pass http://localhost:8000;
              }
          }
          EOF
          
          # Supervisor config
          COPY <<'EOF' /etc/supervisor/conf.d/supervisord.conf
          [supervisord]
          nodaemon=true
          
          [program:backend]
          command=python /app/backend/main.py
          directory=/app/backend
          autostart=true
          autorestart=true
          
          [program:nginx]
          command=/usr/sbin/nginx -g "daemon off;"
          autostart=true
          autorestart=true
          EOF
          
          EXPOSE 80
          CMD ["/usr/bin/supervisord"]
          DOCKERFILE
          
          # Create docker-compose.yml
          cat > docker-compose.yml << COMPOSE
          version: '3.8'
          services:
            emr:
              build: .
              ports:
                - "80:80"
              environment:
                - PATIENT_COUNT=${PatientCount}
              restart: unless-stopped
          COMPOSE
          
          # Build and start the application
          docker-compose up -d
          
          # Create CloudWatch Logs configuration
          cat > /etc/awslogs/awslogs.conf << CWLOGS
          [general]
          state_file = /var/lib/awslogs/agent-state
          
          [/var/log/user-data.log]
          file = /var/log/user-data.log
          log_group_name = /aws/ec2/emr-training-system
          log_stream_name = {instance_id}/user-data.log
          datetime_format = %Y-%m-%d %H:%M:%S
          CWLOGS
          
          # Start CloudWatch Logs agent
          yum install -y awslogs
          systemctl start awslogsd
          systemctl enable awslogsd
          
          echo "EMR Training System deployment complete!"

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EMR-Instance
        - Key: Application
          Value: EMR-Training-System

  # Elastic IP
  EMRElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EMRInstance
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EIP

Outputs:
  PublicURL:
    Description: URL to access the EMR Training System
    Value: !Sub 'http://${EMRElasticIP}'
  
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${EMRElasticIP}'
  
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EMRInstance