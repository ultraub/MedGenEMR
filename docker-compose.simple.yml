version: '3.8'

services:
  # Backend API
  backend:
    image: python:3.9-slim
    container_name: emr-backend
    working_dir: /app
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    command: |
      bash -c "
        apt-get update && apt-get install -y curl default-jre-headless &&
        mkdir -p data logs &&
        pip install -r requirements.txt &&
        python -c 'from database.database import engine, Base; Base.metadata.create_all(bind=engine)' &&
        python scripts/create_sample_providers.py || true &&
        python main.py
      "
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend (for development)
  frontend-dev:
    image: node:18-alpine
    container_name: emr-frontend-dev
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: |
      sh -c "
        npm install &&
        npm start
      "
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    profiles:
      - development

  # Frontend builder (for production)
  frontend-builder:
    image: node:18-alpine
    container_name: emr-frontend-builder
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_build:/app/build
    command: |
      sh -c "
        npm ci || npm install &&
        REACT_APP_API_URL='' npm run build &&
        echo 'Frontend built successfully'
      "
    profiles:
      - production

  # Nginx Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: emr-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx-docker.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
    depends_on:
      backend:
        condition: service_healthy
    profiles:
      - production

# Volumes for data persistence
volumes:
  backend_data:
  frontend_build:
  node_modules: