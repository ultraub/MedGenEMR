version: '3.8'

# Multi-platform deployment configuration
# Supports AWS, Azure, and local deployments with 100+ patients

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: emr-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/emr.db}
      - SECRET_KEY=${SECRET_KEY:-production-secret-key-change-this}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-8}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost}
      - PYTHON_ENV=${PYTHON_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - emr-data:/app/data
      - emr-logs:/app/logs
      - emr-dicom:/app/dicom_storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - emr-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-}
    container_name: emr-frontend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - emr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data initialization service with deployment profiles
  data-init:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: emr-data-init
    command: |
      bash -c "
        python scripts/unified_deployment_setup.py --profile ${DEPLOYMENT_PROFILE:-production}
      "
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/emr.db}
      - DEPLOYMENT_PROFILE=${DEPLOYMENT_PROFILE:-production}
    volumes:
      - emr-data:/app/data
      - ./deployment.config.json:/app/deployment.config.json:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emr-network
    profiles:
      - setup

  # Nginx reverse proxy for production deployments
  nginx:
    image: nginx:alpine
    container_name: emr-nginx
    ports:
      - "${NGINX_PORT:-443}:443"
      - "${NGINX_HTTP_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - emr-static:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - emr-network
    profiles:
      - production

  # PostgreSQL for production deployments
  postgres:
    image: postgres:15-alpine
    container_name: emr-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-emr}
      - POSTGRES_USER=${POSTGRES_USER:-emr_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-emr_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - emr-network
    profiles:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-emr_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  emr-data:
    driver: local
  emr-logs:
    driver: local
  emr-dicom:
    driver: local
  emr-static:
    driver: local
  postgres-data:
    driver: local

networks:
  emr-network:
    driver: bridge