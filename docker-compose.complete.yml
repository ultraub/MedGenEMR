version: '3.8'

services:
  # Frontend builder and server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=
    container_name: emr-frontend
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emr-network

  # Backend API with Synthea
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.production.complete
    container_name: emr-backend
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backend/scripts:/app/scripts
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=sqlite:///./data/emr.db
    networks:
      - emr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx proxy
  nginx:
    image: nginx:alpine
    container_name: emr-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - emr-network
    command: |
      sh -c "
        # Wait for frontend container to build and copy files
        while [ ! -d /usr/share/nginx/html/static ]; do
          echo 'Waiting for frontend build...'
          docker cp emr-frontend:/app/build/. /usr/share/nginx/html/ 2>/dev/null || true
          sleep 5
        done
        echo 'Frontend files copied, starting nginx...'
        nginx -g 'daemon off;'
      "

  # Data initialization with Synthea
  data-init:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.production.complete
    container_name: emr-data-init
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backend/scripts:/app/scripts
      - ./init-scripts:/app/init-scripts
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=sqlite:///./data/emr.db
      - PATIENT_COUNT=${PATIENT_COUNT:-50}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emr-network
    command: |
      bash -c "
        echo 'üè• MedGenEMR Data Initialization'
        echo '================================'
        
        # Create database tables
        echo 'üìä Creating database tables...'
        python -c 'from database.database import engine, Base; Base.metadata.create_all(bind=engine)'
        
        # Create providers
        echo 'üë®‚Äç‚öïÔ∏è Creating sample providers...'
        python scripts/create_sample_providers.py || echo 'Providers may already exist'
        
        # Populate clinical catalogs
        echo 'üìã Populating clinical catalogs...'
        python scripts/populate_clinical_catalogs.py
        
        # Generate Synthea patients
        echo 'üë• Generating ${PATIENT_COUNT:-50} patients with Synthea...'
        mkdir -p synthea_output
        java -jar synthea-with-dependencies.jar \
          -p ${PATIENT_COUNT:-50} \
          --exporter.fhir.export false \
          --exporter.csv.export true \
          --exporter.csv.folder_per_run false \
          -d synthea_output
        
        # Import Synthea data
        echo 'üì• Importing Synthea data...'
        if [ -f scripts/optimized_synthea_import.py ]; then
          python scripts/optimized_synthea_import.py \
            --input-dir synthea_output \
            --batch-size 100
        else
          echo '‚ö†Ô∏è  Optimized import script not found, using basic import'
          python scripts/import_synthea_with_notes.py || \
          python scripts/optimized_comprehensive_setup.py || \
          echo 'Import scripts not found'
        fi
        
        # Add reference ranges
        echo 'üìä Adding reference ranges...'
        python scripts/add_reference_ranges.py || echo 'Reference ranges may already exist'
        
        # Assign patients to providers
        echo 'üîó Assigning patients to providers...'
        python scripts/assign_patients_to_providers_auto.py || echo 'Assignment may already exist'
        
        # Create sample imaging studies
        echo 'üè• Creating sample imaging studies...'
        python scripts/create_generic_dicoms.py || echo 'DICOM creation optional'
        
        echo '‚úÖ Data initialization complete!'
        
        # Show summary
        python -c \"
from database.database import get_db
from models.synthea_models import Patient, Provider, Encounter, Observation
db = next(get_db())
print('\\nüìä Database Summary:')
print(f'   Providers: {db.query(Provider).count()}')
print(f'   Patients: {db.query(Patient).count()}')
print(f'   Encounters: {db.query(Encounter).count()}')
print(f'   Observations: {db.query(Observation).count()}')
        \"
      "
    profiles:
      - init

networks:
  emr-network:
    driver: bridge

volumes:
  emr-data:
  emr-logs: